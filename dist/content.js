/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/*!************************!*\
  !*** ./src/content.ts ***!
  \************************/

const blurFilter = "blur(6px)";
let textToBlur = "";
// Search this DOM node for text to blur and blur the parent element if found.
function processNode(node) {
    if (node.childNodes.length > 0) {
        Array.from(node.childNodes).forEach(processNode);
    }
    if (node.nodeType === Node.TEXT_NODE &&
        node.textContent !== null && node.textContent.trim().length > 0) {
        const parent = node.parentElement;
        if (parent == null) {
            return;
        }
        if (parent.tagName === 'SCRIPT' || parent.style.filter === blurFilter) {
            // Already blurred
            return;
        }
        if (node.textContent.includes(textToBlur)) {
            blurElement(parent);
        }
    }
}
function blurElement(elem) {
    elem.style.filter = blurFilter;
    console.debug("blurred id:" + elem.id + " class:" + elem.className +
        " tag:" + elem.tagName + " text:" + elem.textContent);
}
// Create a MutationObserver to watch for changes to the DOM.
const observer = new MutationObserver((mutations) => {
    mutations.forEach((mutation) => {
        if (mutation.addedNodes.length > 0) {
            mutation.addedNodes.forEach(processNode);
        }
        else {
            processNode(mutation.target);
        }
    });
});
// Enable the content script by default.
let enabled = true;
const keys = ["enabled", "item"];
chrome.storage.sync.get(keys, (data) => {
    if (data.enabled === false) {
        enabled = false;
    }
    if (data.item) {
        textToBlur = data.item;
    }
    // Only start observing the DOM if the extension is enabled and there is text to blur.
    if (enabled && textToBlur.trim().length > 0) {
        observer.observe(document, {
            attributes: false,
            characterData: true,
            childList: true,
            subtree: true,
        });
        // Loop through all elements on the page for initial processing.
        processNode(document);
    }
});

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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SUFBSTtTQUNoQixDQUFDO1FBQ0YsZ0VBQWdFO1FBQ2hFLFdBQVcsQ0FBQyxRQUFRLENBQUM7SUFDekIsQ0FBQztBQUNMLENBQUMsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL215LWNocm9tZS1leHRlbnNpb24vLi9zcmMvY29udGVudC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBibHVyRmlsdGVyID0gXCJibHVyKDZweClcIlxubGV0IHRleHRUb0JsdXIgPSBcIlwiXG5cbi8vIFNlYXJjaCB0aGlzIERPTSBub2RlIGZvciB0ZXh0IHRvIGJsdXIgYW5kIGJsdXIgdGhlIHBhcmVudCBlbGVtZW50IGlmIGZvdW5kLlxuZnVuY3Rpb24gcHJvY2Vzc05vZGUobm9kZTogTm9kZSkge1xuICAgIGlmIChub2RlLmNoaWxkTm9kZXMubGVuZ3RoID4gMCkge1xuICAgICAgICBBcnJheS5mcm9tKG5vZGUuY2hpbGROb2RlcykuZm9yRWFjaChwcm9jZXNzTm9kZSlcbiAgICB9XG4gICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IE5vZGUuVEVYVF9OT0RFICYmXG4gICAgICAgIG5vZGUudGV4dENvbnRlbnQgIT09IG51bGwgJiYgbm9kZS50ZXh0Q29udGVudC50cmltKCkubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zdCBwYXJlbnQgPSBub2RlLnBhcmVudEVsZW1lbnRcbiAgICAgICAgaWYgKHBhcmVudCA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICBpZiAocGFyZW50LnRhZ05hbWUgPT09ICdTQ1JJUFQnIHx8IHBhcmVudC5zdHlsZS5maWx0ZXIgPT09IGJsdXJGaWx0ZXIpIHtcbiAgICAgICAgICAgIC8vIEFscmVhZHkgYmx1cnJlZFxuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5vZGUudGV4dENvbnRlbnQuaW5jbHVkZXModGV4dFRvQmx1cikpIHtcbiAgICAgICAgICAgIGJsdXJFbGVtZW50KHBhcmVudClcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gYmx1ckVsZW1lbnQoZWxlbTogSFRNTEVsZW1lbnQpIHtcbiAgICBlbGVtLnN0eWxlLmZpbHRlciA9IGJsdXJGaWx0ZXJcbiAgICBjb25zb2xlLmRlYnVnKFwiYmx1cnJlZCBpZDpcIiArIGVsZW0uaWQgKyBcIiBjbGFzczpcIiArIGVsZW0uY2xhc3NOYW1lICtcbiAgICAgICAgXCIgdGFnOlwiICsgZWxlbS50YWdOYW1lICsgXCIgdGV4dDpcIiArIGVsZW0udGV4dENvbnRlbnQpXG59XG5cbi8vIENyZWF0ZSBhIE11dGF0aW9uT2JzZXJ2ZXIgdG8gd2F0Y2ggZm9yIGNoYW5nZXMgdG8gdGhlIERPTS5cbmNvbnN0IG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoKG11dGF0aW9ucykgPT4ge1xuICAgIG11dGF0aW9ucy5mb3JFYWNoKChtdXRhdGlvbikgPT4ge1xuICAgICAgICBpZiAobXV0YXRpb24uYWRkZWROb2Rlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBtdXRhdGlvbi5hZGRlZE5vZGVzLmZvckVhY2gocHJvY2Vzc05vZGUpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwcm9jZXNzTm9kZShtdXRhdGlvbi50YXJnZXQpXG4gICAgICAgIH1cbiAgICB9KVxufSlcblxuLy8gRW5hYmxlIHRoZSBjb250ZW50IHNjcmlwdCBieSBkZWZhdWx0LlxubGV0IGVuYWJsZWQgPSB0cnVlXG5jb25zdCBrZXlzID0gW1wiZW5hYmxlZFwiLCBcIml0ZW1cIl1cblxuY2hyb21lLnN0b3JhZ2Uuc3luYy5nZXQoa2V5cywgKGRhdGEpID0+IHtcbiAgICBpZiAoZGF0YS5lbmFibGVkID09PSBmYWxzZSkge1xuICAgICAgICBlbmFibGVkID0gZmFsc2VcbiAgICB9XG4gICAgaWYgKGRhdGEuaXRlbSkge1xuICAgICAgICB0ZXh0VG9CbHVyID0gZGF0YS5pdGVtXG4gICAgfVxuICAgIC8vIE9ubHkgc3RhcnQgb2JzZXJ2aW5nIHRoZSBET00gaWYgdGhlIGV4dGVuc2lvbiBpcyBlbmFibGVkIGFuZCB0aGVyZSBpcyB0ZXh0IHRvIGJsdXIuXG4gICAgaWYgKGVuYWJsZWQgJiYgdGV4dFRvQmx1ci50cmltKCkubGVuZ3RoID4gMCkge1xuICAgICAgICBvYnNlcnZlci5vYnNlcnZlKGRvY3VtZW50LCB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVzOiBmYWxzZSxcbiAgICAgICAgICAgIGNoYXJhY3RlckRhdGE6IHRydWUsXG4gICAgICAgICAgICBjaGlsZExpc3Q6IHRydWUsXG4gICAgICAgICAgICBzdWJ0cmVlOiB0cnVlLFxuICAgICAgICB9KVxuICAgICAgICAvLyBMb29wIHRocm91Z2ggYWxsIGVsZW1lbnRzIG9uIHRoZSBwYWdlIGZvciBpbml0aWFsIHByb2Nlc3NpbmcuXG4gICAgICAgIHByb2Nlc3NOb2RlKGRvY3VtZW50KVxuICAgIH1cbn0pXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=